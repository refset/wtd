* wtd.server

  Server providing RPC API for use by wtd.el and other potential WTD
  clients

** Technical Specification

   Currently a lot of operations are manual in WTD.  This has been
   largely intentional, as I've been trying to flesh out the
   interaction design of the system, and it is faster to prototype the
   interaction patterns manually than it would be writing code, that
   would end up being continually revised and discarded.  However, by
   now many interaction patterns are well-defined, so it's appropriate
   to automate them.

   In the current emacs lisp client code some functions are provided
   to do things like create journal entries in the transaction
   journal, and create internal links to the transactions for use in
   the index. We will incorporate http requests to the wtd server into
   the emacs client code as well.

   Probably the most obvious piece to implement is instruments.
   Instruments will be built as independent services (one service for
   each identity) using a standard framework that will live in this
   repo, to ensure that instruments conform to a standard
   specification of instrument events.  The actual instrument code
   will be implemented as libraries that can be pulled in as
   dependencies into particular instrument servers.  Because of the
   standardized nature of instruments, there can also potentially be
   templated programmmatic insertion of instrument library dependency
   and API routes in the instrument servers.

   One of the tensions to address in this architecture is between the
   utility of having data stored in org-mode files, versus stored in
   some sort of database or medium-scale log for stream processing
   purposes.  The answer right now is to to punt on this until WTD
   implemented as a senters PASS.  For now WTD can be conducted in an
   "edit and compile" style model.  Make changes to files, and then
   execute a script.  The script processes transactions that have not
   yet been read, recording the last transaction read, and updating an
   event-sourced data structure of transactions.

   It will be necessary/useful to implment functionality to allow WTD
   author identities to be easily switched between, and new identities
   created, by RPC calls to the server.  The server creates initial
   files in the directory structure, and the emacs-side calls to it
   also opens the file in a buffer. Alternatively we can even on the
   emacs side make the journal have the appearance of being an org
   file (as a side note, really we're mainly using outline-mode
   features) when in fact it is produced from.  However it is nice to
   be able have the data be in git version control.  These questions
   will need to be explored and considered going forward.

   So far, the initial RPC API will consist of a command to initiate a
   project/identity, a command to switch between identities, and a
   command to process new transactions.

   Index files should continue to be manually editable in emacs.

** Usage

   1. Start a server

   ```
   lein ring server
   ```

   2. Launch emacs with `wtd.el` loaded.

   3. Use wtd-* commands in emacs that involve making requests to this
      server.  See main README for instructions on editing files and
      using emacs wtd commands.

** License

Copyright Â© 2020 FIXME

This program and the accompanying materials are made available under the
terms of the Eclipse Public License 2.0 which is available at
http://www.eclipse.org/legal/epl-2.0.

This Source Code may also be made available under the following Secondary
Licenses when the conditions for such availability set forth in the Eclipse
Public License, v. 2.0 are satisfied: GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or (at your
option) any later version, with the GNU Classpath Exception which is available
at https://www.gnu.org/software/classpath/license.html.
