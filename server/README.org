* wtd.server

  Server providing RPC API for use by wtd.el and other potential WTD
  clients

** Technical Specification

   Currently a lot of operations are manual in WTD.  This has been
   largely intentional, as I've been trying to flesh out the
   interaction design of the system, and it is faster to prototype the
   interaction patterns manually than it would be writing code, that
   would end up being continually revised and discarded.  However, by
   now many interaction patterns are well-defined, so it's appropriate
   to automate them.

   In the current emacs lisp client code some functions are provided
   to do things like create journal entries in the transaction
   journal, and create internal links to the transactions for use in
   the index. We will incorporate http requests to the wtd server into
   the emacs client code as well.

   Probably the most obvious piece to implement first is augmenters.
   There are two kinds of augmenters: opaque and transparent.
   Transparent augmenters are to be defined fully in normal protocol
   transactions, and their instruments are driven entirely by actions
   visible in the transaction log. Opaque augmenters will be built as
   libraries and made use of as dependencies in per-identity
   independent services (one service for each identity, serving all
   the augmenters used by that identity) using a standard augmenter
   framework that will live in the senters/senters repo, to ensure
   that instruments conform to the standard specification.

   Transparent augmenters make use of the senters protocol core
   library which will include a compiler for INQL a query language for
   defining and executing transparent instruments based on data in the
   transaction log.

   A next obvious step, once we have working augmenters, is to
   implement an attendant that follows the centers defined in the
   transaction log and produces an attention-ranked report on centers
   in need of attention.

   Because of the value of being able to work with files in emacs,
   files will be the system of record, and directly processed by the
   code.  This includes writing the report output to a file.

** Usage

   1. Start a server

   ```
   lein ring server
   ```

   2. Launch emacs with `wtd.el` loaded.

   3. Use wtd-* commands in emacs that involve making requests to this
      server.  See main README for instructions on editing files and
      using emacs wtd commands.

** License

Copyright Â© 2020 FIXME

This program and the accompanying materials are made available under the
terms of the Eclipse Public License 2.0 which is available at
http://www.eclipse.org/legal/epl-2.0.

This Source Code may also be made available under the following Secondary
Licenses when the conditions for such availability set forth in the Eclipse
Public License, v. 2.0 are satisfied: GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or (at your
option) any later version, with the GNU Classpath Exception which is available
at https://www.gnu.org/software/classpath/license.html.
